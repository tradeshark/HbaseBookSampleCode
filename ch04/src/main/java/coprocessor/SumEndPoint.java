package coprocessor;

import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.Service;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.Coprocessor;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.protobuf.ResponseConverter;
import org.apache.hadoop.hbase.regionserver.HRegion;
import org.apache.hadoop.hbase.regionserver.InternalScanner;
import org.apache.hadoop.hbase.util.Bytes;
import org.myname.hbase.Coprocessor.autogenerated.Sum;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by cloudera on 5/5/15.
 */
public class SumEndPoint extends Sum.SumService implements Coprocessor, CoprocessorService {

    private RegionCoprocessorEnvironment env;

    @Override
    public Service getService() {
        return this;
    }

    @Override
    public void start(CoprocessorEnvironment env) throws IOException {
        if (env instanceof RegionCoprocessorEnvironment) {
            this.env = (RegionCoprocessorEnvironment) env;
        } else {
            throw new CoprocessorException("Must be loaded on a table region!");
        }
    }


    @Override
    public void stop(CoprocessorEnvironment env) throws IOException {
        // do mothing
    }


    @Override
    public void getSum(RpcController controller, Sum.SumRequest request, RpcCallback done) {
        Scan scan = new Scan();
        scan.addFamily(Bytes.toBytes(request.getFamily()));
        scan.addColumn(Bytes.toBytes(request.getFamily()), Bytes.toBytes(request.getColumn()));
        Sum.SumResponse response = null;
        InternalScanner scanner = null;
        try {
            scanner = env.getRegion().getScanner(scan);
            List<Cell> results = new ArrayList<>();
            boolean hasMore = false;
            float sum = 0L;
            do {
                hasMore = scanner.next(results);
                if(results.size() > 0 ) {
                    for (Cell cell : results) {
                        sum = sum + Float.parseFloat(Bytes.toString(CellUtil.cloneValue(cell)));
                    }
                }
                results.clear();
            } while (hasMore);

            response = Sum.SumResponse.newBuilder().setSum((long) sum).build();

        } catch (IOException ioe) {
            ResponseConverter.setControllerException(controller, ioe);
            System.out.println(ioe);
        } finally {
            if (scanner != null) {
                try {
                    scanner.close();
                } catch (IOException ignored) {
                    System.out.println(ignored);
                }
            }
        }
        done.run(response);
    }
}