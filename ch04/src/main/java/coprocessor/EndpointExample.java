package coprocessor;

import com.google.protobuf.ServiceException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.util.Bytes;
import org.myname.hbase.Coprocessor.autogenerated.Sum;
import util.HBaseHelper;

import java.io.IOException;
import java.util.Map;

// cc EndpointExample Example using the custom row-count endpoint
// vv EndpointExample
public class EndpointExample {

  public static void main(String[] args) throws IOException {

      //
      Configuration conf = HBaseConfiguration.create();
      HConnection connection = HConnectionManager.createConnection(conf);
      HTableInterface table = connection.getTable("Customer");
      final Sum.SumRequest request = Sum.SumRequest.newBuilder().setFamily("cf1").setColumn("CreditLimit").build();
      try {
          Map<byte[], Long> results = table.coprocessorService(Sum.SumService.class, null, null,
                  new Batch.Call<Sum.SumService, Long>() {
                      @Override
                      public Long call(Sum.SumService aggregate) throws IOException {
                          BlockingRpcCallback rpcCallback = new BlockingRpcCallback();
                          aggregate.getSum(null, request, rpcCallback);
                          Sum.SumResponse response = (Sum.SumResponse)rpcCallback.get();
                          return response.hasSum() ? response.getSum() : 0L;
                      }
                  });
          for (Long sum : results.values()) {
              System.out.println("Sum = " + sum);
          }
      } catch (ServiceException e) {
          e.printStackTrace();
      } catch (Throwable e) {
          e.printStackTrace();
      }
  }
}
// ^^ EndpointExample
